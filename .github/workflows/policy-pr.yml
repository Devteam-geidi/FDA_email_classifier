name: Propose email policy changes (agent)

# Run manually or on a schedule (uncomment cron if desired)
on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "0 3 * * 1-5"   # run Mon–Fri at 03:00 UTC

permissions:
  contents: write         # allow pushing branches/commits
  pull-requests: write    # allow opening/updating pull requests

env:
  BASE_BRANCH: main
  FILE: rules/email_policy.yaml
  REVIEWERS: Devteam-geidi,NICKOSAN00    # GitHub usernames of required reviewers
  LABELS: ai-generated,policy            # PR labels for easy filtering

jobs:
  propose:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Check out the full repo history so we can branch cleanly
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Identify as a bot for commit history clarity
      - name: Configure bot identity
        run: |
          git config user.name  "geidi-policy-bot"
          git config user.email "policy-bot@users.noreply.github.com"

      # 3️⃣ Compute a unique branch name and PR title
      - name: Compute branch + titles
        id: meta
        run: |
          DATE=$(date +%F)
          BRANCH="policy-update/${DATE}"
          TITLE="AI: Proposed email policy update — ${DATE}"
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "title=${TITLE}"   >> $GITHUB_OUTPUT

      # 4️⃣ Generate the updated policy file using your actual Python agent
      #    (adjust the command if your entry point differs)
      - name: Generate updated policy
        run: |
          mkdir -p rules
          python - <<'PY'
          from app.agents.policy_refiner import update_policy_from_logs
          from supabase import create_client
          import os
          url = os.environ["SUPABASE_URL"]
          key = os.environ["SUPABASE_KEY"]
          supabase = create_client(url, key)
          update_policy_from_logs(supabase)   # writes rules/email_policy.yaml
          PY
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      # 5️⃣ Check if anything actually changed
      - name: Skip if no changes
        id: diff
        run: |
          git add "$FILE"
          if git diff --cached --quiet; then
            echo "changed=no" >> $GITHUB_OUTPUT
          else
            echo "changed=yes" >> $GITHUB_OUTPUT
          fi

      - name: Stop early (no diff)
        if: steps.diff.outputs.changed == 'no'
        run: echo "No changes detected — exiting."

      # 6️⃣ Create a new branch from main and commit the change
      - name: Create branch from base
        if: steps.diff.outputs.changed == 'yes'
        run: |
          git fetch origin "${BASE_BRANCH}"
          git checkout -B "${{ steps.meta.outputs.branch }}" "origin/${BASE_BRANCH}"

      - name: Commit changes
        if: steps.diff.outputs.changed == 'yes'
        run: |
          git commit -m "AI: update ${FILE}" || echo "Nothing to commit (already committed?)"

      # 7️⃣ Push the branch to GitHub
      - name: Push branch
        if: steps.diff.outputs.changed == 'yes'
        run: |
          git push --force-with-lease origin "${{ steps.meta.outputs.branch }}"

      # 8️⃣ Create or update the pull request
      - name: Open or update PR
        if: steps.diff.outputs.changed == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          REPO="${{ github.repository }}"
          BRANCH="${{ steps.meta.outputs.branch }}"
          TITLE="${{ steps.meta.outputs.title }}"
          BODY=$'**Summary**\nThis PR was generated by the AI agent to propose changes to `rules/email_policy.yaml`.\n\n**Reviewer checklist**\n- [ ] Policy intent is correct\n- [ ] YAML syntax looks good\n- [ ] No unintended side effects'

          if gh pr view --repo "$REPO" "$BRANCH" >/dev/null 2>&1; then
            echo "PR already exists for $BRANCH — posting a comment."
            gh pr comment --repo "$REPO" "$BRANCH" --body "Update pushed by agent."
            gh pr edit   --repo "$REPO" "$BRANCH" --add-label "${LABELS}" || true
            gh pr edit   --repo "$REPO" "$BRANCH" --add-reviewer "${REVIEWERS}" || true
          else
            echo "Creating PR for $BRANCH"
            gh pr create \
              --repo "$REPO" \
              --base "${BASE_BRANCH}" \
              --head "$BRANCH" \
              --title "$TITLE" \
              --body  "$BODY" \
              --label "${LABELS}" \
              --reviewer "${REVIEWERS}"
          fi
