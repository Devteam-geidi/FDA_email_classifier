name: Propose email policy changes (agent)

on:
  workflow_dispatch: {}           # run manually
  # schedule:                     # optional: uncomment to run on a schedule
  #   - cron: "0 3 * * 1-5"       # 03:00 UTC on weekdays

permissions:
  contents: write                 # push branches/commits
  pull-requests: write            # open/update PRs

env:
  BASE_BRANCH: main
  FILE: email_policy.yaml
  REVIEWERS: NICKOSAN00,Devteam-geidi    # e.g. geidi/policy-reviewers or rey
  LABELS: ai-generated,policy

jobs:
  propose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure bot identity
        run: |
          git config user.name  "geidi-policy-bot"
          git config user.email "policy-bot@users.noreply.github.com"

      - name: Compute branch + titles
        id: meta
        run: |
          DATE=$(date +%F)
          BRANCH="policy-update/${DATE}"
          TITLE="AI: Proposed email policy update — ${DATE}"
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "title=${TITLE}"   >> $GITHUB_OUTPUT

      # 🔁 Replace this with HOW your agent produces the file
      - name: Generate updated policy (placeholder)
        run: |
          # Example only: pretend we update the file
          # Your agent should write to $FILE here instead.
          echo "# updated $(date -u)" >> "$FILE"

      - name: Skip if no changes
        id: diff
        run: |
          git add "$FILE"
          if git diff --cached --quiet; then
            echo "changed=no" >> $GITHUB_OUTPUT
          else
            echo "changed=yes" >> $GITHUB_OUTPUT
          fi

      - name: Stop early (no diff)
        if: steps.diff.outputs.changed == 'no'
        run: echo "No changes detected — exiting."

      - name: Create branch from base
        if: steps.diff.outputs.changed == 'yes'
        run: |
          git fetch origin "${BASE_BRANCH}"
          git checkout -B "${{ steps.meta.outputs.branch }}" "origin/${BASE_BRANCH}"

      - name: Commit changes
        if: steps.diff.outputs.changed == 'yes'
        run: |
          git commit -m "AI: update ${FILE}" || echo "Nothing to commit (already committed?)"

      - name: Push branch
        if: steps.diff.outputs.changed == 'yes'
        run: |
          git push --force-with-lease origin "${{ steps.meta.outputs.branch }}"

      - name: Ensure GitHub CLI is authenticated
        if: steps.diff.outputs.changed == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth status

      - name: Open or update PR
        if: steps.diff.outputs.changed == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          REPO="${{ github.repository }}"
          BRANCH="${{ steps.meta.outputs.branch }}"
          TITLE="${{ steps.meta.outputs.title }}"
          BODY=$'**Summary**\nThis PR was generated by the AI agent to propose changes to `email_policy.yaml`.\n\n**Reviewer checklist**\n- [ ] Policy intent is correct\n- [ ] YAML syntax looks good\n- [ ] No unintended side effects'
          # Try to view existing PR for this branch
          if gh pr view --repo "$REPO" "$BRANCH" >/dev/null 2>&1; then
            echo "PR already exists for $BRANCH — posting a comment."
            gh pr comment --repo "$REPO" "$BRANCH" --body "Update pushed by agent."
            # Optionally re-request reviewers and re-apply labels:
            gh pr edit --repo "$REPO" "$BRANCH" --add-label "${LABELS}" || true
            gh pr edit --repo "$REPO" "$BRANCH" --add-reviewer "${REVIEWERS}" || true
          else
            echo "Creating PR for $BRANCH"
            gh pr create \
              --repo "$REPO" \
              --base "${BASE_BRANCH}" \
              --head "$BRANCH" \
              --title "$TITLE" \
              --body  "$BODY" \
              --label "${LABELS}" \
              --reviewer "${REVIEWERS}"
          fi
